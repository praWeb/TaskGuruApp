type CTaskConnection {
	tasks: [Task]
	nextToken: String
}

type CTaskGroupConnection {
	taskGroups: [TaskGroup]
	nextToken: String
}


type Mutation {
	addTaskGroup(id: ID!, title: String!, description: String): TaskGroup
	addTask(
		id: ID!,
		title: String!,
		description: String!,
		assignedTo: ID!,
		createdBy: ID!,
		createdAt: String!,
		percentCompleted: Int,
		noteId: ID,
		taskType: TaskType,
		taskGroupId: ID,
		scheduleID: ID,
		status: TaskStatus,
		plannedStartDate: String,
		plannedEndDate: String
	): Task
}

type Note {
	id: ID!
	createdAt: String!
	updatedAt: String!
	task: Task
	time: TaskTimer
}


type Query {
	getTasks(filter: TaskFilter, first: Int, after: String): CTaskConnection
  getTaskGroups(first: Int, after: String): CTaskGroupConnection
	getTaskDetails(id: ID!): Task
	getUserDetails(email: String!, password: String!): User
}

type Schedule {
	id: ID!
	nextRunOn: String!
	noOfDays: Int!
}

type Task {
	id: ID!
	title: String!
	description: String!
	percentCompleted: Int
	assignedTo: User!
	createdBy: User!
	taskGroup: TaskGroup
	createdAt: String!
	note: Note
	taskType: TaskType
	status: TaskStatus
	schedule: Schedule
	plannedStartDate: String
	plannedEndDate: String
}

input TaskFilter {
	AND: [TaskFilter!]
	OR: [TaskFilter!]
	createdAt: String
	createdAt_not: String
	createdAt_in: [String!]
	createdAt_not_in: [String!]
	createdAt_lt: String
	createdAt_lte: String
	createdAt_gt: String
	createdAt_gte: String
	description: String
	description_not: String
	description_in: [String!]
	description_not_in: [String!]
	description_lt: String
	description_lte: String
	description_gt: String
	description_gte: String
	description_contains: String
	description_not_contains: String
	description_starts_with: String
	description_not_starts_with: String
	description_ends_with: String
	description_not_ends_with: String
	id: ID
	id_not: ID
	id_in: [ID!]
	id_not_in: [ID!]
	id_lt: ID
	id_lte: ID
	id_gt: ID
	id_gte: ID
	id_contains: ID
	id_not_contains: ID
	id_starts_with: ID
	id_not_starts_with: ID
	id_ends_with: ID
	id_not_ends_with: ID
	title: String
	title_not: String
	title_in: [String!]
	title_not_in: [String!]
	title_lt: String
	title_lte: String
	title_gt: String
	title_gte: String
	title_contains: String
	title_not_contains: String
	title_starts_with: String
	title_not_starts_with: String
	title_ends_with: String
	title_not_ends_with: String
	updatedAt: String
	updatedAt_not: String
	updatedAt_in: [String!]
	updatedAt_not_in: [String!]
	updatedAt_lt: String
	updatedAt_lte: String
	updatedAt_gt: String
	updatedAt_gte: String
}

type TaskGroup {
	id: ID!
	title: String!
	description: String
	createdAt: String!
	updatedAt: String
	tasks: [Task]
}

enum TaskStatus {
	created
	started
	inProgress
	postponed
	completed
}

type TaskTimer {
	id: ID!
	task: Task
	status: TimerStatus
	timeSpent: Int!
	note: Note
}

enum TaskType {
	recursive
	nonRecursive
}

enum TimerStatus {
	running
	paused
	stopped
}


type User {
	id: ID!
	createdAt: String!
	updatedAt: String!
	name: String!
	tasks: [Task]
	isVerified: Boolean!
	secret: String
	email: String!
	password: String!
}

schema {
	query: Query
	mutation: Mutation
}